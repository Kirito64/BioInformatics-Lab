#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c = 0
i = 0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
FrequentWords= function(Text,k){
Text1 <- strsplit(Text, split=NULL)[[1]]
FrequentPatterns <- c()
Pattern1 <- c()
Count <- integer()
for (i in 1:(length(Text1)-k+1)){
Pattern<-paste(Text1[i:(i+k-1)],collapse="")
Pattern1[i]<-Pattern
Count[i]<-PatternCount(Text,Pattern)
}
maxCount<-max(Count)
for (i in 1:(length(Text1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns <- c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns<-FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
txt=readline("Enter text:")
k=readline("Enter value of k:")
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c = 0
i = 0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
FrequentWords= function(str,k){
str1 <- strsplit(str, split=NULL)[[1]]
FrequentPatterns <- c()
Pattern1 <- c()
Count <- integer()
for (i in 1:(length(str1)-k+1)){
Pattern<-paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]<-Pattern
Count[i]<-PatternCount(str,Pattern)
}
maxCount<-max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns <- c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns<-FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
n = readline("Input k:")
print(unique(FrequentWords(txt,k)))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length){
if(substring(str,i,i+pattern_Length-1) == pattern){
c=c+1;
}
}
return(c)
}
print(PatternCount(str,pattern))
FrequentWords= function(str,k){
str1 <- strsplit(str, split=NULL)[[1]]
FrequentPatterns <- c()
Pattern1 <- c()
Count <- integer()
for (i in 1:(length(str1)-k+1)){
Pattern<-paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]<-Pattern
Count[i]<-PatternCount(str,Pattern)
}
maxCount<-max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns <- c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns<-FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
txt = as.character(str)
n = readline("Input k:")
k = as.integer(n)
print(unique(FrequentWords(txt,k)))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
#ASS1 EX-2
print(PatternCount(str,pattern))
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
#ASS1 EX-3
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
GATCCAGATCCCCATAC
GATCCAGATCCCCATAC
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
#ASS1 EX-3
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
txt = as.character(str)
n = readline("Input k:")
k = as.integer(n)
print(unique(FrequentWords(txt,k)))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
n = readline("Input k:")
print(unique(FrequentWords(txt,k)))
install.packages("stringr")
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
library(stringr)
str_count(str,pattern)
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
ACAACTATGCATACTATCGGGAACTATCCT
ACAACTATGCATACTATCGGGAACTATCCT
ACAACTATGCATACTATCGGGAACTATCCT
clr
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
library(stringr)
str_count(str,pattern)
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
txt = as.character(str)
n = readline("Input k:")
k = as.integer(n)
print(unique(FrequentWords(txt,k)))
str=readline("Input Text:")
txt = as.character(str)
n = readline("Input k:")
k = as.integer(n)
print(unique(FrequentWords(txt,k)))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2(M-1)
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-2(M-2)
library(stringr)
print (str_count(str,pattern))
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=PatternCount(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
n = readline("Input k:")
print(unique(FrequentWords(txt,k)))
#ASS1 EX-1
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2(M-1)
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-2(M-2)
library(stringr)
print (str_count(str,pattern))
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=str_count(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
library(readr)
str=read_file("DNA-Data.txt")
print(nchar(str))
pattern = "TGATCA"
#ASS1 EX-2(M-1)
PatternCount = function(str,pattern){
c=0
str_Length = nchar(str)
pattern_Length = nchar(pattern)
print(substring(str,i,pattern_Length))
for(i in 1:str_Length - pattern_Length)
if(substring(str,i,i+pattern_Length-1) == pattern)
c=c+1;
return(c)
}
print(PatternCount(str,pattern))
#ASS1 EX-2(M-2)
library(stringr)
print (str_count(str,pattern))
#ASS1 EX-3
FrequentWords= function(str,k){
str1 = strsplit(str, split=NULL)[[1]]
FrequentPatterns = c()
Pattern1 = c()
Count = integer()
for (i in 1:(length(str1)-k+1)){
Pattern=paste(str1[i:(i+k-1)],collapse="")
Pattern1[i]=Pattern
Count[i]=str_count(str,Pattern)
}
maxCount=max(Count)
for (i in 1:(length(str1)-k+1)){
if(Count[i]==maxCount){
FrequentPatterns = c(FrequentPatterns, Pattern1[i])
}
}
FrequentPatterns=FrequentPatterns[!duplicated(FrequentPatterns)]
return(list(FrequentPatterns, maxCount))
}
print(unique(FrequentWords("GATCCAGATCCCCATAC",2)))
str=readline("Input Text:")
CGATATATCCATAG
str=readline("Input Text:")
